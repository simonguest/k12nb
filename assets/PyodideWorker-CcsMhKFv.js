const f=a=>new URL(`../pyodide/${a}`,import.meta.url).toString(),p={chess:[f("chess-1.10.0-py3-none-any.whl")]},m=a=>{const r=[];let e;const n=/^\s*import\s+(\w+)(?:\s+as\s+\w+)?(?:\s*,\s*(\w+)(?:\s+as\s+\w+)?)*|^\s*from\s+(\w+)(?:\.\w+)*\s+import/gm,l=new Set;for(;(e=n.exec(a))!==null;){if(e[1]&&(l.add(e[1]),e[2])){const t=e[2].split(",").map(i=>i.trim());for(const i of t)i&&l.add(i)}e[3]&&l.add(e[3])}for(const t of l)if(p[t]){const i=p[t];for(const o of i)r.includes(o)||r.push(o)}return r};var u="data:application/octet-stream;base64,aW1wb3J0IG1hdHBsb3RsaWIKaW1wb3J0IG1hdHBsb3RsaWIucHlwbG90IGFzIHBsdAppbXBvcnQgaW8KaW1wb3J0IGJhc2U2NAoKbWF0cGxvdGxpYi51c2UoJ0FHRycpCgojIEFkZCBhIHBsdCBfcmVwcl9wbmdfIGZ1bmN0aW9uIC0gdGhpcyB3aWxsIGVtaXQgYSBwbmcgaWYgcGx0IGlzIHJldHVybmVkIGZyb20gYSBjZWxsCmRlZiBfcmVwcl9wbmdfKCk6CiAgICBidWYgPSBpby5CeXRlc0lPKCkKICAgIHBsdC5zYXZlZmlnKGJ1ZiwgZm9ybWF0PSdwbmcnLCBiYm94X2luY2hlcz0ndGlnaHQnKQogICAgYnVmLnNlZWsoMCkKICAgIGltYWdlX2Jhc2U2NCA9IGJhc2U2NC5iNjRlbmNvZGUoYnVmLmdldHZhbHVlKCkpLmRlY29kZSgndXRmLTgnKSAKICAgIHBsdC5jbGYoKQogICAgcGx0LmNsb3NlKCkKICAgIGJ1Zi5jbG9zZSgpCiAgICByZXR1cm4gaW1hZ2VfYmFzZTY0CgpwbHQuX3JlcHJfcG5nXyA9IF9yZXByX3BuZ18KCiMgT3ZlcnJpZGUgdGhlIG9yaWdpbmFsIHNob3cgZnVuY3Rpb24KZGVmIG1hdHBsb3RsaWJfY3VzdG9tX3Nob3coKToKICAgIGltYWdlX2Jhc2U2NCA9IHBsdC5fcmVwcl9wbmdfKCkKICAgIGpzLmltYWdlQmFzZTY0KGltYWdlX2Jhc2U2NCkgIyB0eXBlOmlnbm9yZSAgICAKCnBsdC5zaG93ID0gbWF0cGxvdGxpYl9jdXN0b21fc2hvdwo=";const y=["matplotlib"],b=async(a,r)=>{const n=await(await fetch(new URL(Object.assign({"./matplotlib.py":u})[`./${r}.py`],import.meta.url))).text();await a.runPythonAsync(n)};let s,d=null;const g=typeof SharedArrayBuffer<"u";async function I(){console.log("PyodideWorker: Starting Pyodide initialization...");{const{loadPyodide:e}=await import(new URL("../pyodide/pyodide.mjs",import.meta.url).toString());s=await e()}if(console.log("PyodideWorker: Checking for interrupt buffer"),g){const e=new SharedArrayBuffer(4);d=new Int32Array(e),s.setInterruptBuffer(d),console.log("PyodideWorker: Interrupt buffer created")}else console.warn("PyodideWorker: SharedArrayBuffer is not available, interrupt functionality will be disabled");console.log("PyodideWorker: Creating override for stdout"),s.globals.set("_override_stdout",{write:e=>(self.postMessage({type:"stdout",text:e}),e.length),flush:()=>{}}),console.log("PyodideWorker: Creating override for js functions"),s.globals.set("js",{imageBase64:e=>{self.postMessage({type:"execute_result",result:{"image/png":[e]}})}}),console.log("PyodideWorker: Initializing Python environment");const r=await(await fetch(new URL("data:application/octet-stream;base64,IyB0eXBlOmlnbm9yZQppbXBvcnQgc3lzCnN5cy5zdGRvdXQgPSBfb3ZlcnJpZGVfc3Rkb3V0IAo=",import.meta.url))).text();await s.runPythonAsync(r)}self.onmessage=async a=>{const{type:r,...e}=a.data;switch(r){case"initialize":try{await I(),self.postMessage({type:"initialized",interruptBuffer:d?d.buffer:null,hasInterrupt:g})}catch(t){console.error("PyodideWorker: Failed to initialize Pyodide:",t),self.postMessage({type:"fatal",error:String(t)})}break;case"run":const n=e.code,l=e.cellId;try{if(s){console.log("PyodideProvider: Loading packages from imports");const t=await s.loadPackagesFromImports(n);console.log("PyodideProvider: Loading additional packages from code");const i=await s.loadPackage(m(n));console.log("PyodideProvider: Searching for overrides");for(const c of[...t,...i])y.indexOf(c.name)!==-1&&(console.log(`PyodideProvider: Implementing override for ${c.name}`),await b(s,c.name));console.log(`PyodideProvider: Running cell ${l}`);const o=await s.runPythonAsync(`${n}`);console.log("PyodideProvider: Returning result"),o&&(typeof o=="object"?("_repr_svg_"in o&&self.postMessage({type:"execute_result",result:{"image/svg+xml":o._repr_svg_()}}),"_repr_html_"in o&&self.postMessage({type:"execute_result",result:{"text/html":o._repr_html_()}}),"_repr_png_"in o&&self.postMessage({type:"execute_result",result:{"image/png":o._repr_png_()}}),self.postMessage({type:"execute_result",result:{"text/plain":o.__repr__()}})):self.postMessage({type:"execute_result",result:{"text/plain":o.toString()}})),self.postMessage({type:"execute_completed"})}}catch(t){console.error(t),self.postMessage({type:"error",error:String(t)})}break}};
